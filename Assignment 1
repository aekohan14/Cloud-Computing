// Assignment 1
// EE 655
// node.js

// 1.	Setup and Initialization:

app.listen(port, () => {
  console.log(`Server listening at http://localhost:${port}`);
});

const Express = require('express');
const BodyParser = require('body-parser');
const fs = require('fs');
const path = require('path');
const app = express();
const port = 3000;

app.use(BodyParser.json());                              // Parse JSON
app.use(Express.static('public'));                       // Static files from the 'public' directory

// Create necessary directories and files
const PublicDir = path.join(__dirname, 'public');
const DevicesFile = path.join(__dirname, 'devices.json');
const LogsFile = path.join(__dirname, 'logs.txt');

FindDirectory(PublicDir);
FindFile(DevicesFile, '[]');                      // Create empty array if file doesn't exist
FindFile(LogsFile, '');                           // Create an empty string if text file doesn't exist

// 2. Device Registration

app.post('/register', (req, res) => {
  const { DeviceId, DeviceType } = req.body;

  if (!DeviceId || !DeviceType) {
    return res.status(400).json({ error: 'You need both the DeviceId and the DeviceType' });
  }

  const ExistingDevices = LoadDevices();                                    // Load existing devices

  if (ExistingDevices.find(device => device.DeviceId === DeviceId)) {       // Check if device is already registered
    return res.status(409).json({ error: 'Device already registered' });
  }

  ExistingDevices.push({ DeviceId, DeviceType });                           // Save new device
  SaveDevices(ExistingDevices); 
  LogData(`Device registered - Device ID: ${DeviceId}, Device Type: ${DeviceType}`);
  res.status(201).json({ message: 'Device registered' });
});

// 3. Displaying Devices

app.get('/show', (req, res) => {
  const ExistingDevices = loadDevices();        
  res.json(ExistingDevices);              //Show exisiting devices
});

// 4. Receiving Device Data

app.post('/data', (req, res) => {
  const { DeviceId, data } = req.body;

  if (!DeviceId || !data) {
    return res.status(400).json({ error: 'Both the DeviceId and data are needed' });
  }

  LogData(`Data received from Device ID ${DeviceId} - ${data}`);       // Log data
  res.json({ message: 'Data received' });
});

// 5. Sending Commands to Devices

app.post('/command', (req, res) => {
  const { DeviceId, command } = req.body;

  if (!DeviceId || !command) {
    return res.status(400).json({ error: 'Both the DeviceId and the command are needed' });
  }

  LogData(`Command sent to Device ID ${DeviceId} - ${command}`);        // Log command
  res.json({ message: 'Command sent successfully.' });
});

// 6. Logging

function LogData(message) {
  const Timestamp = new Date().toISOString();
  fs.appendFileSync(logsFile, `${Timestamp}: ${message}\n`);
}

// Save devices to devices.json
function saveDevices(devices) {
    fs.writeFileSync(DevicesFile, JSON.stringify(devices, null, 2), 'utf8');
}

// Make sure directory exists
function FindDirectory(directory) {
  if (!fs.existsSync(directory)) {
    fs.mkdirSync(directory);
  }
}

// Make sure file exists
function FindFile(file, DefaultContent) {
  if (!fs.existsSync(file)) {
    fs.writeFileSync(file, DefaultContent, 'utf8');
  }
}


